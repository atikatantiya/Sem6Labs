Value	Type	Row	Col	
int		 DATATYPE		 12	 1
arm		 IDENTIFIER		 12	 5
(		 SPECIAL_SYMBOL		 12	 8
int		 DATATYPE		 12	 9
n		 IDENTIFIER		 12	 13
)		 SPECIAL_SYMBOL		 12	 14
{		 SPECIAL_SYMBOL		 13	 1
int		 DATATYPE		 14	 2
sum		 IDENTIFIER		 14	 6
=		 LOGICAL_OPERATOR		 14	 9
0		  NUMBER		 14	 11
;		 SPECIAL_SYMBOL		 14	 11
int		 DATATYPE		 15	 2
temp		 IDENTIFIER		 15	 6
=		 LOGICAL_OPERATOR		 15	 10
n		 IDENTIFIER		 15	 11
;		 SPECIAL_SYMBOL		 15	 12
while		 KEYWORD		 17	 2
(		 SPECIAL_SYMBOL		 17	 7
temp		 IDENTIFIER		 17	 8
)		 SPECIAL_SYMBOL		 17	 12
{		 SPECIAL_SYMBOL		 17	 14
sum		 IDENTIFIER		 18	 3
+=		 ASSIGNMENT_OPERATOR		 18	 6
pow		 IDENTIFIER		 18	 8
(		 SPECIAL_SYMBOL		 18	 11
temp		 IDENTIFIER		 18	 12
%		 ARITHMETIC_OPERATOR		 18	 16
10		  NUMBER		 18	 19
,		 SPECIAL_SYMBOL		 18	 19
3		  NUMBER		 18	 21
)		 SPECIAL_SYMBOL		 18	 21
;		 SPECIAL_SYMBOL		 18	 22
temp		 IDENTIFIER		 19	 3
=		 LOGICAL_OPERATOR		 19	 7
temp		 IDENTIFIER		 19	 8
/		 ARITHMETIC_OPERATOR		 19	 13
10		  NUMBER		 19	 15
;		 SPECIAL_SYMBOL		 19	 15
}		 SPECIAL_SYMBOL		 20	 2
if		 KEYWORD		 21	 2
(		 SPECIAL_SYMBOL		 21	 4
sum		 IDENTIFIER		 21	 5
==		 RELATIONAL_OPERATOR		 21	 8
n		 IDENTIFIER		 21	 10
)		 SPECIAL_SYMBOL		 21	 11
return		 KEYWORD		 22	 3
1		  NUMBER		 22	 11
;		 SPECIAL_SYMBOL		 22	 11
else		 KEYWORD		 23	 2
return		 KEYWORD		 24	 3
0		  NUMBER		 24	 11
;		 SPECIAL_SYMBOL		 24	 11
}		 SPECIAL_SYMBOL		 25	 1
int		 DATATYPE		 27	 1
main		 IDENTIFIER		 27	 5
(		 SPECIAL_SYMBOL		 27	 9
)		 SPECIAL_SYMBOL		 27	 10
{		 SPECIAL_SYMBOL		 28	 1
int		 DATATYPE		 29	 2
n		 IDENTIFIER		 29	 6
,		 SPECIAL_SYMBOL		 29	 7
i		 IDENTIFIER		 29	 8
;		 SPECIAL_SYMBOL		 29	 9
int		 DATATYPE		 30	 2
x		 IDENTIFIER		 30	 6
[		 SPECIAL_SYMBOL		 30	 7
4		  NUMBER		 30	 9
]		 SPECIAL_SYMBOL		 30	 9
=		 LOGICAL_OPERATOR		 30	 10
{		 SPECIAL_SYMBOL		 30	 11
1		  NUMBER		 30	 13
,		 SPECIAL_SYMBOL		 30	 13
2		  NUMBER		 30	 15
,		 SPECIAL_SYMBOL		 30	 15
13		  NUMBER		 30	 18
,		 SPECIAL_SYMBOL		 30	 18
7		  NUMBER		 30	 20
}		 SPECIAL_SYMBOL		 30	 20
;		 SPECIAL_SYMBOL		 30	 21
printf		 IDENTIFIER		 31	 2
(		 SPECIAL_SYMBOL		 31	 8
Enter a number		  STRING		 31	 10
)		 SPECIAL_SYMBOL		 31	 25
;		 SPECIAL_SYMBOL		 31	 26
scanf		 IDENTIFIER		 32	 2
(		 SPECIAL_SYMBOL		 32	 7
%d		  STRING		 32	 9
,		 SPECIAL_SYMBOL		 32	 12
&		 OTHER_OPERATOR		 32	 13
n		 IDENTIFIER		 32	 14
)		 SPECIAL_SYMBOL		 32	 15
;		 SPECIAL_SYMBOL		 32	 16
for		 KEYWORD		 36	 2
(		 SPECIAL_SYMBOL		 36	 5
i		 IDENTIFIER		 36	 6
=		 LOGICAL_OPERATOR		 36	 7
0		  NUMBER		 36	 9
;		 SPECIAL_SYMBOL		 36	 9
i		 IDENTIFIER		 36	 10
<		 RELATIONAL_OPERATOR		 36	 11
n		 IDENTIFIER		 36	 12
;		 SPECIAL_SYMBOL		 36	 13
i		 IDENTIFIER		 36	 14
++		 OTHER_OPERATOR		 36	 15
)		 SPECIAL_SYMBOL		 36	 17
if		 KEYWORD		 37	 2
(		 SPECIAL_SYMBOL		 37	 4
arm		 IDENTIFIER		 37	 5
(		 SPECIAL_SYMBOL		 37	 8
x		 IDENTIFIER		 37	 9
[		 SPECIAL_SYMBOL		 37	 10
i		 IDENTIFIER		 37	 11
]		 SPECIAL_SYMBOL		 37	 12
)		 SPECIAL_SYMBOL		 37	 13
)		 SPECIAL_SYMBOL		 37	 14
printf		 IDENTIFIER		 38	 3
(		 SPECIAL_SYMBOL		 38	 9
%d is Arm \n		  STRING		 38	 11
,		 SPECIAL_SYMBOL		 38	 24
x		 IDENTIFIER		 38	 25
[		 SPECIAL_SYMBOL		 38	 26
i		 IDENTIFIER		 38	 27
]		 SPECIAL_SYMBOL		 38	 28
)		 SPECIAL_SYMBOL		 38	 29
;		 SPECIAL_SYMBOL		 38	 30
else		 KEYWORD		 39	 2
printf		 IDENTIFIER		 40	 3
(		 SPECIAL_SYMBOL		 40	 9
%d is not a Arm \n		  STRING		 40	 11
,		 SPECIAL_SYMBOL		 40	 30
x		 IDENTIFIER		 40	 31
[		 SPECIAL_SYMBOL		 40	 32
i		 IDENTIFIER		 40	 33
]		 SPECIAL_SYMBOL		 40	 34
)		 SPECIAL_SYMBOL		 40	 35
;		 SPECIAL_SYMBOL		 40	 36
return		 KEYWORD		 41	 2
0		  NUMBER		 41	 10
;		 SPECIAL_SYMBOL		 41	 10
}		 SPECIAL_SYMBOL		 42	 1
